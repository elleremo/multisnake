{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/Core/Types.js","webpack:///./src/js/Core/game.js","webpack:///./src/js/Core/player.js","webpack:///./src/js/Core/render.js","webpack:///./src/js/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;AACA,gDAAwC;AACxC;AACA,8CAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA,WAAG;AACH;AACA;;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;;;;;;;;;;;;;AChHA;AAAA;AAAA;AAAA;AAAkC;AACD;AACjC,WAAW,aAAa;AACxB,WAAW,cAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8CAAM;AAChC;AACA,0BAA0B,6CAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACgB;;;;;;;;;;;;;ACpEhB;AAAA;AAAA;AAA8D;AAC9D;AACA;AACA;AACA;AACO;AACP;AACA,qBAAqB;AACrB;AACA;AACA,uBAAuB,6CAAM,OAAO;AACpC,uBAAuB,0CAAG,CAAC,gDAAS;AACpC;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,QAAQ,2CAAI;AACZ,yBAAyB,4CAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wCAAwC,gDAAS;AACjD;AACA;AACA;AACA;AACA;AACA,wCAAwC,gDAAS;AACjD;AACA;AACA;AACA;AACA;AACA,wCAAwC,gDAAS;AACjD;AACA;AACA;AACA;AACA;AACA,wCAAwC,gDAAS;AACjD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;ACzKA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAmC;AACnC;AACA,eAAe,+CAAI;AACnB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// webpack-livereload-plugin\n \t(function() {\n \t  if (typeof window === \"undefined\") { return };\n \t  var id = \"webpack-livereload-plugin-script-a4992d5a7b017cbe\";\n \t  if (document.getElementById(id)) { return; }\n \t  var el = document.createElement(\"script\");\n \t  el.id = id;\n \t  el.async = true;\n \t  el.src = \"//\" + location.hostname + \":35729/livereload.js\";\n \t  document.getElementsByTagName(\"head\")[0].appendChild(el);\n \t}());\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/index.js\");\n","// import enumerate = Reflect.enumerate;\nexport class Cell {\n    constructor(x, y, color) {\n        this.pos = new Vector(0, 0);\n        this._color = '#000';\n        this.comp = 2;\n        this.isTurn = false;\n        this.pos = new Vector(x, y);\n        this._color = color;\n        // this.props = props;\n    }\n    color(color) {\n        this._color = color;\n        this.on();\n    }\n    off() {\n        let step = this.props.step;\n        let x = this.pos.x * step + 2;\n        let y = this.pos.y * step + 2;\n        step = step - 4;\n        this.props.ctx.clearRect(x, y, step, step);\n        this.isTurn = false;\n    }\n    on() {\n        this.props.ctx.fillStyle = this._color;\n        let step = this.props.step;\n        let x = this.pos.x * step + this.comp;\n        let y = this.pos.y * step + this.comp;\n        step = step - this.comp * 2;\n        this.props.ctx.fillRect(x, y, step, step);\n        this.isTurn = true;\n        return this;\n    }\n}\nexport class VGrid {\n    constructor(amountX, amountY) {\n        this.amountX = amountX;\n        this.amountY = amountY;\n        this.createMatrix();\n    }\n    createMatrix() {\n        let matrix = [];\n        for (var x = 0; x < this.amountX; x++) {\n            matrix[x] = [0];\n            for (var y = 0; y < this.amountY; y++) {\n                matrix[x][y] = 0;\n            }\n        }\n        this.matrix = matrix;\n    }\n}\nexport class Vector {\n    constructor(x, y) {\n        this._length = 0;\n        this.x = x;\n        this.y = y;\n        // this.length = this.length; // Проверить как работают сет/гет\n    }\n    set length(value) {\n        this._length = value;\n    }\n    get length() {\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n}\nexport var Direction;\n(function (Direction) {\n    Direction[\"UP\"] = \"UP\";\n    Direction[\"LEFT\"] = \"LEFT\";\n    Direction[\"DOWN\"] = \"DOWN\";\n    Direction[\"RIGHT\"] = \"RIGHT\";\n})(Direction || (Direction = {}));\nexport class Dir extends Vector {\n    constructor(dir) {\n        super(1, 0);\n        switch (dir) {\n            case Direction.UP:\n                this.up();\n                break;\n            case Direction.DOWN:\n                this.down();\n                break;\n            case Direction.LEFT:\n                this.left();\n                break;\n            case Direction.RIGHT:\n                this.right();\n                break;\n        }\n    }\n    up() {\n        this.status = Direction.UP;\n        this.x = 0;\n        this.y = -1;\n    }\n    down() {\n        this.status = Direction.DOWN;\n        this.x = 0;\n        this.y = 1;\n    }\n    left() {\n        this.status = Direction.LEFT;\n        this.x = -1;\n        this.y = 0;\n    }\n    right() {\n        this.status = Direction.RIGHT;\n        this.x = 1;\n        this.y = 0;\n    }\n}\nexport class Rect extends Vector {\n}\n","import { Render } from \"./render\";\nimport { Snake } from \"./player\";\n// import {LevelManager} from \"./level_manager\"\n// import {ObjectManager} from \"./object_manager\"\n//, Render, LevelManager, ObjectManager\n// Game.level\n// Game.render\n// Game.levelManager\n// Game.objectManager\n// Game инитит основные свойства в общий класс\n// Создает публичные подкласы для доступа извне\n// Имеет методы Stop, Run, Reload\nclass Setting {\n    constructor(setting) {\n        this.gridSize = 20;\n        this.step = 20;\n        this.speed = 1;\n        this.snakeLength = 5;\n        this.canvas = setting.canvas;\n        this.ctx = setting.canvas.getContext(\"2d\");\n        this.step = setting.step;\n        this.gridSize = setting.gridSize;\n        this.snakeLength = setting.snakeLength;\n        this.speed = setting.speed;\n    }\n    set newGridSize(value) {\n        this.gridSize = value; // 20\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n    }\n    set newStep(value) {\n        this.step = value;\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n    }\n    get width() {\n        return this.gridSize * this.step;\n    }\n    get height() {\n        return this.gridSize * this.step;\n    }\n}\nclass Game {\n    // levelManager = new LevelManager();\n    // objectManager = new ObjectManager();\n    constructor(set) {\n        this.setting = new Setting(set);\n        // this.level = new Level(this.setting);\n        this.render = new Render(this.setting);\n        this.resizeCanvas(this.setting.gridSize, this.setting.step);\n        this.player = new Snake(this.setting);\n        this.player.draw();\n        this.player.animate();\n        // console.log( 'set: ', this.setting );\n    }\n    // newGame() {\n    //     this.level = new Level();\n    // }\n    start() {\n    }\n    // Получение настроек ->\n    // Решить проблему с типизацией undefined\n    resizeCanvas(gridSize, step) {\n        this.setting.newStep = step;\n        this.setting.newGridSize = gridSize;\n        this.render.drawGrid();\n    }\n}\nexport { Game };\n","import { Cell, Dir, Direction, VGrid, Vector } from \"./Types\";\n// Snake должен уметь двигаться\n// Возможносто стоит создать вектор движения\n// и поворачивать его на 90гр по нажатию клавиши\n//\nexport class Snake {\n    constructor(props) {\n        this.id = -1; // Чтобы первый snake имел id = 0\n        this.bodyColor = '#5c98c9';\n        this.headColor = '#bd63e4';\n        this.pos = new Vector(5, 1); //позиция головы 6 1\n        this.dir = new Dir(Direction.RIGHT);\n        this.body = [];\n        console.log(this);\n        Snake.CountSnakes += 1;\n        this.id += 1;\n        this.props = props;\n        this.size = this.props.step; // сжимаем отрисовку\n        this.speed = 1000 / props.speed;\n        this.snakeLength = props.snakeLength;\n        // this.pos = new Vector(this.snakeLength, 1);\n        Cell.prototype.props = this.props;\n        this.vgrid = new VGrid(this.props.gridSize, this.props.gridSize);\n        // console.log('VGRIIID', this.vgrid);\n        this.generate();\n        // console.log('snakeLength', props.snakeLength);\n        // console.log('dir', this.pos);\n        // this.oldPos = new Vector(1, 1);\n        // console.log('body = ', this.body);\n        this.addKeyEvent();\n    }\n    generate() {\n        for (let i = 0; i < this.snakeLength; i++) {\n            let x = this.pos.x - this.snakeLength + i; // 6-5+0\n            let y = this.pos.y;\n            //\n            // if (x < 0 || y<0){\n            //\n            // }\n            // else {\n            //     this.vgrid.matrix[y][x] = 1;\n            // }\n            let color = this.bodyColor;\n            if (i == this.snakeLength - 1)\n                color = this.headColor;\n            let o = new Cell(x, y, color);\n            this.body.push(o);\n        }\n        this.draw();\n        console.log('GEN', this.vgrid);\n    }\n    draw() {\n        for (var cell in this.body) {\n            this.body[cell].on();\n        }\n        //\n        // let last = this.body.length - 1;\n        // let color = this.bodyColor;\n        //\n        // let headcell = this.body[last]; // -1 ???\n        // headcell.color(color);\n        //\n        //\n        // let ass = this.body[this.body.length - this.snakeLength];\n        //\n        // ass.off();\n        // // this.vgrid.matrix[ass.pos.x][ass.pos.y]=0;\n        // // this.body.shift(); // удаляем задницу после выключения\n        //\n        // let o = new Cell(this.pos.x, this.pos.y, this.headColor);\n        // // this.vgrid.matrix[this.pos.x][this.pos.y]=1;\n        // this.body.push(o.on());\n        // let ctx = this.props.ctx;\n        // ctx.fillStyle = this.color;\n        //\n        // let comp = 3; // compression\n        // let size = this.props.step - comp - comp;\n        // // let headpos = (length + 1) * size;\n        //\n        // let x = this.pos.x * this.props.step;\n        // let y = this.pos.y * this.props.step;\n        //\n        // ctx.fillRect(x + comp, y + comp, size, size);\n        //\n        // // let assX = this.pos.x - this.length ;\n        // // let assY = this.pos.y - this.length ;\n        // let assX = this.oldPos.x * 20;\n        // let assY = this.oldPos.y * 20;\n        //\n        //\n        // ctx.clearRect(assX + comp, assY + comp, size, size);\n    }\n    move() {\n        var v;\n        // this.isCrash();\n        this.pos.x += this.dir.x;\n        this.pos.y += this.dir.y;\n        console.log('Body: ', this.body);\n        // this.oldPos.x += this.dir.x;\n        // this.oldPos.y += this.dir.y;\n    }\n    isCrash() {\n        let head = this.body[this.body.length - 1].pos; // head position Vector\n        // Если индекс head не равен текущему то чтото делаем\n        for (let index in this.body) {\n            let i = +index;\n            if (i !== (this.body.length - 1) && this.body[i].isTurn) {\n                if (head.x == this.body[i].pos.x && head.y == this.body[i].pos.y) {\n                    alert('Столкновение');\n                }\n            }\n        }\n    }\n    animate() {\n        let o = this;\n        function f() {\n            o.draw();\n            // o.isCrash();\n            o.move();\n            o.animate();\n        }\n        setTimeout(f, this.speed);\n    }\n    addKeyEvent() {\n        let o = this;\n        let Keys;\n        (function (Keys) {\n            Keys[\"UP\"] = \"KeyW\";\n            Keys[\"LEFT\"] = \"KeyA\";\n            Keys[\"DOWN\"] = \"KeyS\";\n            Keys[\"RIGHT\"] = \"KeyD\";\n        })(Keys || (Keys = {}));\n        let speed = o.speed;\n        window.document.addEventListener(\"keyup\", (e) => {\n            if (e.code == Keys.DOWN || Keys.UP || Keys.LEFT || Keys.RIGHT) {\n                // console.log(o.speed);\n                o.speed = speed;\n            }\n        });\n        window.document.addEventListener('keydown', (e) => {\n            switch (e.code) {\n                case Keys.UP:\n                    if (o.dir.status == Direction.DOWN)\n                        break;\n                    // o.speed = 100;\n                    o.dir.up();\n                    break;\n                case Keys.LEFT:\n                    if (o.dir.status == Direction.RIGHT)\n                        break;\n                    // o.speed = 100;\n                    o.dir.left();\n                    break;\n                case Keys.DOWN:\n                    if (o.dir.status == Direction.UP)\n                        break;\n                    // o.speed = 100;\n                    o.dir.down();\n                    break;\n                case Keys.RIGHT:\n                    if (o.dir.status == Direction.LEFT)\n                        break;\n                    // o.speed = 100;\n                    o.dir.right();\n                    break;\n            }\n        });\n    }\n}\nSnake.CountSnakes = 0;\n","export class Render {\n    constructor(setting) {\n        this.setting = setting;\n    }\n    clearGrid() {\n        this.setting.ctx.clearRect(0, 0, this.setting.width, this.setting.height);\n        console.log(\"clearGrid\");\n    }\n    drawGrid() {\n        this.clearGrid();\n        let step = this.setting.step;\n        let ctx = this.setting.ctx;\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = '#aec2dc';\n        // кол-во клеток\n        for (let i = 0; i < this.setting.gridSize; i++) {\n            ctx.moveTo(i * step, 0);\n            ctx.lineTo(i * step, this.setting.height);\n            ctx.stroke();\n            // console.log ('i = ', i);\n        }\n        for (var i = 0; i < this.setting.gridSize; i++) {\n            ctx.moveTo(0, i * step);\n            ctx.lineTo(this.setting.width, i * step);\n            ctx.stroke();\n        }\n        ctx.strokeStyle = '#000000';\n        // ctx.fillRect(250,50,50,50);\n        ctx.strokeRect(0, 0, this.setting.width, this.setting.height);\n        // ctx.stroke();\n        // ctx.fill();\n        // ctx.fillRect(0,0,200,1);\n        console.log(\"DrawGrid\");\n    }\n}\n","import { Game } from \"./Core/game\";\nlet canvas = document.querySelector(\"canvas\");\nlet game = new Game({\n    canvas: canvas,\n    gridSize: 20,\n    step: 20,\n    speed: 5,\n    snakeLength: 5,\n});\n// game.setting.newStep = 30;\n// canvas.width= 500;\n// canvas.height= 500;\n// game.resizeCanvas(2, 50);\n// console.log(\"CTX after : \" , game.setting.ctx);\n// game.render.drawGrid();\n// console.log('5 - FROM I4ndex', game.setting);\n//\n// let matrix : number[][] = [] ;\n// // matrix[] = 5;\n//\n//\n// for (var x=0; x< 20; x++) {\n//     matrix[x]=[];\n//     for (var y=0; y<20; y++){\n//         matrix[x][y]=0;\n//     }\n// }\n//\n//\n// // createMatrix();\n// console.log('Matrix', matrix );\n// function createMatrix () {\n//     // let x: [number] = [0];\n//     // let y: [number] = [0];\n//\n//     for (let i = 0; i < 10; i++) {\n//         matrix[i][] = 0;\n//         for (let j = 0; j < 10; j++) {\n//             y.push(i) }\n//     }\n//\n//\n//\n//     matrix.x = x;\n//     matrix.y = y;\n//\n// }\n"],"sourceRoot":""}